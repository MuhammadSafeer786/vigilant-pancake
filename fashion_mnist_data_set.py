# -*- coding: utf-8 -*-
"""Fashion_MNIST_data_set.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1hi5pSdx-S65hUjWWMEZbk72IhfI3xdFX
"""

!pip install -U tensorflow_datasets

from __future__ import absolute_import,division,print_function

import tensorflow as tf
import tensorflow_datasets as tfds

import math
import numpy as np
import matplotlib.pyplot as plt

import tqdm
import tqdm.auto
tqdm.tqdm = tqdm.auto.tqdm

print(tf.__version__)

dataset, metadata=tfds.load('fashion_mnist', as_supervised=True, with_info=True)
train_dataset, test_dataset = dataset['train'],dataset['test']

class_name = ['T-shirt/top','Trouser','Pullover','Dress','Coat','Sandal','Shirt','Sneaker','Bag','Ankle boot']

def normalize(images,labels):
  images=tf.cast(images, tf.float32)
  images = images/255
  return images, labels

train_dataset = train_dataset.map(normalize)
test_dataset = test_dataset.map(normalize)

"""**Explore the data set**"""

for image, label in test_dataset.take(1):
  break
image = image.numpy().reshape((28,28))
plt.figure()
plt.imshow(image,cmap=plt.cm.binary)
plt.colorbar()
plt.grid(False)
plt.show()

plt.figure(figsize=(10,10))
i=0
for (image,label) in test_dataset.take(25):
  image = image.numpy().reshape((28,28))
  plt.subplot(5,5,i+1)
  plt.xticks([])
  plt.yticks([])
  plt.grid(False)
  plt.imshow(image,cmap=plt.cm.binary)
  plt.xlabel(class_name[label])
  i+=1
plt.show()

model = tf.keras.Sequential([
    tf.keras.layers.Flatten(input_shape=(28,28,1)),
    tf.keras.layers.Dense(128, activation=tf.nn.relu),
    tf.keras.layers.Dense(10,activation=tf.nn.softmax)
    ])

model.compile(optimizer='adam',
              loss='sparse_categorical_crossentropy',
              metrics=['accuracy'])

batch_size = 32
train_dataset = train_dataset.repeat().shuffle(60000).batch(batch_size)
test_dataset = test_dataset.batch(batch_size)

model.fit(train_dataset,epochs=5, steps_per_epoch=math.ceil(60000/batch_size))

test_loss, test_accuracy = model.evaluate(test_dataset, steps = math.ceil(10000/32))
print('Accuracy on test dataset:', test_accuracy)



